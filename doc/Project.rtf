{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fnil\fprq0\fcharset0 Source Code Pro;}{\f5\froman\fprq0\fcharset128 Liberation Serif{\*\falt Times New Roman};}{\f6\fswiss\fprq0\fcharset128 Liberation Sans{\*\falt Arial};}{\f7\fnil\fprq0\fcharset128 Nachlieli CLM;}{\f8\fnil\fprq2\fcharset0 Nachlieli CLM;}{\f9\fnil\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}}
{\colortbl;\red0\green0\blue0;\red169\green183\blue198;\red43\green43\blue43;\red52\green65\blue52;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033 Normal;}
{\s15\sbasedon0\snext16\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af8\afs28\alang1037\loch\f6\fs28\lang1033 Heading;}
{\s16\sbasedon0\snext16\sl288\slmult1\qr\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033 Text Body;}
{\s17\sbasedon16\snext17\sl288\slmult1\qr\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af7\afs24\alang1037\loch\f5\fs24\lang1033 List;}
{\s18\sbasedon0\snext18\qr\nowidctlpar\sb120\sa120\noline\ltrpar\cf1\i\kerning1\dbch\af7\langfe2052\dbch\af7\afs24\alang1037\ai\loch\f5\fs24\lang1033 Caption;}
{\s19\sbasedon0\snext19\qr\nowidctlpar\noline\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af7\afs24\alang1037\loch\f5\fs24\lang1033 Index;}
{\s20\sbasedon0\snext20\qr\nowidctlpar\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033 Preformatted Text;}
}{\info{\creatim\yr2015\mo9\dy8\hr9\min35}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment LibreOffice}{\vern67241986}}\deftab709
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh16838\paperw11906\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\cf1\rtlch \ltrch\loch
LLVM Pass - Functionality}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\cf1\rtlch \ltrch\loch
We are using the \uc2 \u8220\'81\'67indvar\u8221\'81\'68 (Canonicalize Induction Variables) pass during the analysis. This makes working with loops easier, as all loops are transformed to have a single induction variable which starts at zero and steps by one, as well as changing pointer arithmetic operations to work with array subscripts.\uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\cf1\rtlch \ltrch\loch
We are also using the \uc2 \u8220\'81\'67loop-simplify\u8221\'81\'68 (Canonicalize natural loops), which greatly helps analysis by providing loop pre-header, and making sure all exit blocks from the loop only have predecessors from inside the loop.\uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\cf1\rtlch \ltrch\loch
Dependency analysis }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\rtlch \ltrch\loch
The dependency analysis pass, probably for performance reason, is only performed on demand. Meaning \u8211\'3f the pass itself does nothing when invoked on function. Instead, it is invoked when another pass is calling the }{\b\ab\rtlch \ltrch\loch
Depends}{\rtlch \ltrch\loch
 method.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\rtlch \ltrch\loch
The dependence test input is two instructions, referred to as \uc2 \u8220\'81\'67source\u8221\'81\'68 and \u8220\'81\'67destination\u8221\'81\'68. \uc1 }{\rtlch \ltrch\loch
The reason for those names \u8211\'3f those are the source and the destination nodes in the dependence graph, and the output of the test is the directed edge between them (if there is one). Only simple store and load instructions (simple means \u8211\'3f not volatile or atomic operations) are tested, the rest are ignored. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\rtlch \ltrch\loch
Alias analysis is used to determine if source and destination are accessing the same objects. If they do not, dependence can be quickly ruled out. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\rtlch \ltrch\loch
The loop info analysis maps all loops within the function scope, along with useful information such as loop depth. The existing loops map is used to find the deepest nested loop that is shared between the source and the destination instruction (we are not guaranteed to have such!).}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql{\rtlch \ltrch\loch
// TODO: Example (can be taken from the documentation of establishNestingLevels)}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af9\afs24\alang1037\loch\f5\fs24\lang1033\ql\rtlch \ltrch\loch

\par }