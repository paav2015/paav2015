{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fnil\fprq0\fcharset2 OpenSymbol{\*\falt Arial Unicode MS};}{\f5\froman\fprq0\fcharset128 Liberation Serif{\*\falt Times New Roman};}{\f6\fswiss\fprq0\fcharset128 Liberation Sans{\*\falt Arial};}{\f7\fnil\fprq0\fcharset128 Liberation Serif{\*\falt Times New Roman};}{\f8\fnil\fprq0\fcharset128 Nachlieli CLM;}{\f9\fnil\fprq2\fcharset0 Nachlieli CLM;}{\f10\fnil\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033 Normal;}
{\s1\sbasedon18\snext1\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033 Heading 1;}
{\s2\sbasedon18\snext2\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033 Heading 2;}
{\s3\sbasedon18\snext3\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033 Heading 3;}
{\*\cs15\snext15 Numbering Symbols;}
{\*\cs16\snext16\dbch\af4\dbch\af4\loch\f4 Bullets;}
{\*\cs17\snext17\cf2\ul\ulc0\langfe255\alang255\lang255 Internet Link;}
{\s18\sbasedon0\snext19\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033 Heading;}
{\s19\sbasedon0\snext19\sl288\slmult1\qr\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033 Text Body;}
{\s20\sbasedon19\snext20\sl288\slmult1\qr\nowidctlpar\sb0\sa140\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af8\afs24\alang1037\loch\f5\fs24\lang1033 List;}
{\s21\sbasedon0\snext21\qr\nowidctlpar\sb120\sa120\noline\ltrpar\cf1\i\kerning1\dbch\af8\langfe2052\dbch\af8\afs24\alang1037\ai\loch\f5\fs24\lang1033 Caption;}
{\s22\sbasedon0\snext22\qr\nowidctlpar\noline\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af8\afs24\alang1037\loch\f5\fs24\lang1033 Index;}
{\s23\sbasedon0\snext23\qr\nowidctlpar\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033 Preformatted Text;}
{\s24\sbasedon0\snext24\qr\nowidctlpar\ltrpar\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033 Quotations;}
{\s25\sbasedon18\snext25\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033 Title;}
{\s26\sbasedon18\snext26\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033 Subtitle;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-360\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li3600}\listid2}
{\list\listtemplateid3
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid3}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}{\info{\creatim\yr2015\mo9\dy8\hr9\min35}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment LibreOffice}{\vern67241986}}\deftab709
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh16838\paperw11906\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s1\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\sb240\sa120\ltrpar{\rtlch \ltrch\loch
Moved to overleaf: }{{\field{\*\fldinst HYPERLINK "https://www.overleaf.com/3266421pypcpz#/9166012/" }{\fldrslt {\cf2\ul\ulc0\langfe255\alang255\lang255\rtlch \ltrch\loch
https://www.overleaf.com/3266421pypcpz#/9166012/}}}}
\par \pard\plain \s1\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s1\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
LLVM Pass - Functionality}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
We are using the \uc2 \u8220\'81\'67indvar\u8221\'81\'68 (Canonicalize Induction Variables) pass during the analysis. This makes working with loops easier, as all loops are transformed to have a single induction variable which starts at zero and steps by one, as well as changing pointer arithmetic operations to work with array subscripts.\uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
We are also using the \uc2 \u8220\'81\'67loop-simplify\u8221\'81\'68 (Canonicalize natural loops), which greatly helps analysis by providing loop pre-header, and making sure all exit blocks from the loop only have predecessors from inside the loop.\uc1 }
\par \pard\plain \s2\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Dependency analysis }
\par \pard\plain \s3\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Introduction}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
We are using LLVM's DependenceAnalysis pass, which goal is to successfully analyze loop dependencies in }{\i\ai\rtlch \ltrch\loch
most}{\rtlch \ltrch\loch
 cases. The assumption is that most array references in real-world code are simple (index-wise) and can be covered by a small set of special tests (described above). }{\rtlch \ltrch\loch
The analysis is conservative, meaning the code is always correct but there could be false positives.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\b\ab\rtlch \ltrch\loch
Index}{\cf1\rtlch \ltrch\loch
 is a loop variable.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\b\ab\rtlch \ltrch\loch
Subscript}{\cf1\rtlch \ltrch\loch
 is the pair of expressions that appear in a certain coordinate in a pair of array references.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
For example:}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
In A[i] = }{\cf1\rtlch \ltrch\loch
A}{\cf1\rtlch \ltrch\loch
[i], <i, i> is a subscript.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
In A[j+1] = }{\cf1\rtlch \ltrch\loch
A}{\cf1\rtlch \ltrch\loch
[i], <j+1, i> is a subscript.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
When dealing with multi-dimension array reference, there would be multiple subscripts, one for each dimension. For example, the subscripts in the expression A[i,j,k] = A[i+1,j,k-1] would be <i,i+1>, <j,j>, <k,k-1>.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
The relation between the elements in each subscript pair can be described by }{\cf1\b\ab\rtlch \ltrch\loch
distance}{\cf1\rtlch \ltrch\loch
 and }{\cf1\b\ab\rtlch \ltrch\loch
direction}{\cf1\rtlch \ltrch\loch
. For example, for the subscript <i, i+1>, the distance is 1 and the direction is \uc2 \u8220\'81\'67<\u8221\'81\'68. Notice that since array references does not have to be linear (e.g. A[i*i+5]), distance is not always available. \uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
When dealing with subscripts vector, we will use distance and direction vectors, where each subscript has a corresponding direction and distance. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Direction vectors can be merged using Cartesian product. }{\cf1\rtlch \ltrch\loch
TODO: explain, example}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
When dealing with multidimensional arrays, we say a subscript position is }{\cf1\i0\b\ai0\ab\rtlch \ltrch\loch
separable}{\cf1\rtlch \ltrch\loch
 if its indices do not occur other subscripts. If two different subscripts contain the same index, we say they are }{\cf1\b\ab\rtlch \ltrch\loch
coupled}{\cf1\rtlch \ltrch\loch
.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
For example: }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
<i,i>,<j,j> are separable. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
<i,k>,<i,i+k> are coupled.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
We will handle coupled subscripts as a group.}
\par \pard\plain \s3\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Algorithm}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Input: a pair of array references and loop bounds.\u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Output: \uc2 \u8220\'81\'67no dependence\u8221\'81\'68 or direction vector.\uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  1.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
Partition subscripts into separable and coupled groups.\u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  2.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
Classify each subscript as ZIV, SIV or MIV.\u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  3.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
For each separable subscript: }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  1.\tab}\ilvl1\ls1 \li1080\ri0\lin1080\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
A}{\rtlch \ltrch\loch
pply single subscript test according to its complexity. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  2.\tab}\ilvl1\ls1 \li1080\ri0\lin1080\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
If independence established: output \uc2 \u8220\'81\'67no dependence\u8221\'81\'68 and halt.\uc1 \u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  4.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
For each coupled group: }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  1.\tab}\ilvl1\ls1 \li1080\ri0\lin1080\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
A}{\rtlch \ltrch\loch
pply multiple subscript test. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  2.\tab}\ilvl1\ls1 \li1080\ri0\lin1080\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
If independence established: output \uc2 \u8220\'81\'67no dependence\u8221\'81\'68 and halt.\uc1 \u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain  5.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
Merge all direction vectors computed in the previous steps into a single set of direction vectors.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Notes:}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033{\listtext\pard\plain \dbch\af4\dbch\af4\loch\f4 \u8226\'95\tab}\ilvl0\ls2 \li720\ri0\lin720\rin0\fi-360\ql\ltrpar{\rtlch \ltrch\loch
In steps #3 and #4, it is correct to halt if we prove independence in any group: we are dealing with multi-dimension array reference, so if we do not refer to the same element in one dimension, we obviously do not refer the same data.}
\par \pard\plain \s3\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\b0\ab0\rtlch \ltrch\loch
Dependency }{\b0\ab0\rtlch \ltrch\loch
Tests}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
The approach is to test subscript-by-subscript, calculating the dependency between each pair. Eventually, intersect the results of of the tests to give a binary answer (no dependence, or \u8211\'3f dependence found, and this is the direction/distance vector).}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\b\ab\rtlch \ltrch\loch
ZIV}{\cf1\rtlch \ltrch\loch
 }{\cf1\rtlch \ltrch\loch
(Zero Index Variable)}{\cf1\rtlch \ltrch\loch
 \u8211\'3f This is the simplest case. Both subscripts are loop invariants (the relevant detail - the subscripts are not affected by the loop index). }{\cf1\rtlch \ltrch\loch
In this case, the test is to see if, according to our knowledge of the program, the pair elements might be equal. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Examples: }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Let a, b \uc2 \u8592\'81\'a9 function parameter from unknown source\uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
A[b] = A[b+1] \u8211\'3f we can tell for sure there is no dependency.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
A[a] = A[b] \u8211\'3f possible dependency as we do not know.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\b\ab\rtlch \ltrch\loch
SIV}{\cf1\rtlch \ltrch\loch
 }{\cf1\rtlch \ltrch\loch
(Single Index Variable) }{\cf1\rtlch \ltrch\loch
\u8211\'3f The subscripts contain one induction variable. This could be a part of a more complex expression (e.g. if \uc2 \u8220\'81\'67j\u8221\'81\'68 is the loop index, it could be A[j] or A[j * 2 + 5]). \uc1 }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
This is much more complex, we will split to cases:}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
For the form ai + c1, ai' + c2, this is a }{\cf1\b\ab\rtlch \ltrch\loch
strong SIV}{\cf1\rtlch \ltrch\loch
 subscript (coefficients are equal, constant is different). }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
In this case, we define the dependence distance to be (c1 \u8211\'3f c2) / a.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\b\ab\rtlch \ltrch\loch
MIV}{\cf1\rtlch \ltrch\loch
 (Multiple Index Variable)}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s3\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Implementation}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
The dependency analysis pass, probably for performance reason, is only performed on demand. Meaning \u8211\'3f the pass itself does nothing when invoked on function. Instead, it is invoked when another pass is calling the }{\cf1\b\ab\rtlch \ltrch\loch
Depends}{\cf1\rtlch \ltrch\loch
 method.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
The dependence test input is two instructions, referred to as \uc2 \u8220\'81\'67source\u8221\'81\'68 and \u8220\'81\'67destination\u8221\'81\'68. The reason for those names \uc1 \u8211\'3f those are the source and the destination nodes in the dependence graph, and the output of the test is the directed edge between them (if there is one). Only simple store and load instructions (simple means \u8211\'3f not volatile or atomic operations) are tested, the rest are ignored. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
For clarity, we will use two terms:}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Alias analysis is used to determine if source and destination are accessing the same objects. If they do not, dependence can be quickly ruled out. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
The loop info analysis maps all loops within the function scope, along with useful information such as loop depth. The existing loops map is used to find the deepest nested loop that is shared between the source and the destination instruction (we are not guaranteed to have such!).}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
// TODO: Example (can be taken from the documentation of establishNestingLevels)}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
GetElementPtr (GEP) is a special LLVM instruction }{\cf1\rtlch \ltrch\loch
which is used to calculate memory addresses of pointers and arrays, in a way that resembles the C language array access operations. The parameters for this instruction are base address of the array/pointer, index and element size. The output is the corresponding memory address.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
When analyzing loop dependency, GEP instructions are very interesting. }{\cf1\rtlch \ltrch\loch
In particular, we are interested in GEP instruction pairs where:}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
1. Both instructions refer to the same variable}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
2. The expression used as ??index?? (for accessing the array) is a loop invariant. TODO: Figure that out}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Loop invariant, in our context, meaning an expression that is not related to the loop index. TODO: Really?}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
The source and destination instructions are assigned to pairs. When the condition above are true, each expression is a pair. Otherwise, there is exactly one pair.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\cf1\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
Each}{\cf1\rtlch \ltrch\loch
 pair is classified to }{\cf1\rtlch \ltrch\loch
ZIV, SIV or MIV.}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\cf1\rtlch \ltrch\loch
For ZIV, it }{\cf1\rtlch \ltrch\loch
is sometimes possible to leverage LLVM scalar value evaluation capabilities to quickly prove or disprove dependency. }
\par \pard\plain \s2\qr\nowidctlpar\sb240\sa120\keepn\ltrpar\cf1\kerning1\dbch\af8\langfe2052\dbch\af9\afs28\alang1037\loch\f6\fs28\lang1033\ql\ltrpar{\rtlch \ltrch\loch
References}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
The dependence analysis we are using was created by Preston Brigg. }
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
https://sites.google.com/site/parallelizationforllvm}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Practical Dependence Testing\u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
Gina Goff, Ken Kennedy, and Chau-Wen Tseng\u13\'0d}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
PLDI 1991}
\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar\rtlch \ltrch\loch

\par \pard\plain \s0\qr\nowidctlpar\ltrpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf1\kerning1\dbch\af7\langfe2052\dbch\af10\afs24\alang1037\loch\f5\fs24\lang1033\ql\ltrpar{\rtlch \ltrch\loch
A Seminar on Optimizations for Modern Architectures (http://www.cs.technion.ac.il/~erez/courses/seminar/)}
\par }